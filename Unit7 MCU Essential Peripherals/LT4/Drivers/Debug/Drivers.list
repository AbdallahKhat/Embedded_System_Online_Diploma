
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000edc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001034  08001034  0001103c  2**0
                  CONTENTS
  4 .ARM          00000000  08001034  08001034  0001103c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001034  0800103c  0001103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  0800103c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  0800103c  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001103c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010db  00000000  00000000  00011065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b3  00000000  00000000  00012140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000092c  00000000  00000000  000126f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00013020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  000131b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001319  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021e3  00000000  00000000  00014621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a28a  00000000  00000000  00016804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00020a8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f4  00000000  00000000  00020ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ff4 	.word	0x08000ff4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ff4 	.word	0x08000ff4

08000170 <LCD_kick>:

void my_wait(int x);


void LCD_kick(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	my_wait(20);
 8000174:	2014      	movs	r0, #20
 8000176:	f000 fe7f 	bl	8000e78 <my_wait>
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_SET);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000180:	4806      	ldr	r0, [pc, #24]	; (800019c <LCD_kick+0x2c>)
 8000182:	f000 fb80 	bl	8000886 <MCAL_GPIO_WritePin>
	//	LCD_CTRL |= (1 << ENABLE_SWITCH);
	my_wait(50);
 8000186:	2032      	movs	r0, #50	; 0x32
 8000188:	f000 fe76 	bl	8000e78 <my_wait>
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000192:	4802      	ldr	r0, [pc, #8]	; (800019c <LCD_kick+0x2c>)
 8000194:	f000 fb77 	bl	8000886 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << ENABLE_SWITCH);
}
 8000198:	bf00      	nop
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010800 	.word	0x40010800

080001a0 <LCD_GOTO_XY>:

void LCD_GOTO_XY(int line,int position)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	if(line == 1)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d10d      	bne.n	80001cc <LCD_GOTO_XY+0x2c>
	{
		if(position < 16 && position >= 0)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	2b0f      	cmp	r3, #15
 80001b4:	dc1a      	bgt.n	80001ec <LCD_GOTO_XY+0x4c>
 80001b6:	683b      	ldr	r3, [r7, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db17      	blt.n	80001ec <LCD_GOTO_XY+0x4c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	3b80      	subs	r3, #128	; 0x80
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f9b1 	bl	800052c <LCD_WRITE_COMMAND>
	else if(line == 2)
	{
		if(position < 32 && position >= 0)
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
	}
}
 80001ca:	e00f      	b.n	80001ec <LCD_GOTO_XY+0x4c>
	else if(line == 2)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d10c      	bne.n	80001ec <LCD_GOTO_XY+0x4c>
		if(position < 32 && position >= 0)
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	2b1f      	cmp	r3, #31
 80001d6:	dc09      	bgt.n	80001ec <LCD_GOTO_XY+0x4c>
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	db06      	blt.n	80001ec <LCD_GOTO_XY+0x4c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	3b40      	subs	r3, #64	; 0x40
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f9a0 	bl	800052c <LCD_WRITE_COMMAND>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <LCD_isbusy>:

void LCD_isbusy(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	//DataDir_LCD_PORT &= ~(0xFF << DATA_shift);

	//DATA PINS input
	PinCfg.GPIO_PinNumber = GPIO_PIN_0 ;
 80001f8:	4b66      	ldr	r3, [pc, #408]	; (8000394 <LCD_isbusy+0x1a0>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80001fe:	4b65      	ldr	r3, [pc, #404]	; (8000394 <LCD_isbusy+0x1a0>)
 8000200:	2201      	movs	r2, #1
 8000202:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000204:	4963      	ldr	r1, [pc, #396]	; (8000394 <LCD_isbusy+0x1a0>)
 8000206:	4864      	ldr	r0, [pc, #400]	; (8000398 <LCD_isbusy+0x1a4>)
 8000208:	f000 fabe 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1 ;
 800020c:	4b61      	ldr	r3, [pc, #388]	; (8000394 <LCD_isbusy+0x1a0>)
 800020e:	2202      	movs	r2, #2
 8000210:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000212:	4b60      	ldr	r3, [pc, #384]	; (8000394 <LCD_isbusy+0x1a0>)
 8000214:	2201      	movs	r2, #1
 8000216:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000218:	495e      	ldr	r1, [pc, #376]	; (8000394 <LCD_isbusy+0x1a0>)
 800021a:	485f      	ldr	r0, [pc, #380]	; (8000398 <LCD_isbusy+0x1a4>)
 800021c:	f000 fab4 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000220:	4b5c      	ldr	r3, [pc, #368]	; (8000394 <LCD_isbusy+0x1a0>)
 8000222:	2204      	movs	r2, #4
 8000224:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000226:	4b5b      	ldr	r3, [pc, #364]	; (8000394 <LCD_isbusy+0x1a0>)
 8000228:	2201      	movs	r2, #1
 800022a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800022c:	4959      	ldr	r1, [pc, #356]	; (8000394 <LCD_isbusy+0x1a0>)
 800022e:	485a      	ldr	r0, [pc, #360]	; (8000398 <LCD_isbusy+0x1a4>)
 8000230:	f000 faaa 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000234:	4b57      	ldr	r3, [pc, #348]	; (8000394 <LCD_isbusy+0x1a0>)
 8000236:	2208      	movs	r2, #8
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800023a:	4b56      	ldr	r3, [pc, #344]	; (8000394 <LCD_isbusy+0x1a0>)
 800023c:	2201      	movs	r2, #1
 800023e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000240:	4954      	ldr	r1, [pc, #336]	; (8000394 <LCD_isbusy+0x1a0>)
 8000242:	4855      	ldr	r0, [pc, #340]	; (8000398 <LCD_isbusy+0x1a4>)
 8000244:	f000 faa0 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000248:	4b52      	ldr	r3, [pc, #328]	; (8000394 <LCD_isbusy+0x1a0>)
 800024a:	2210      	movs	r2, #16
 800024c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800024e:	4b51      	ldr	r3, [pc, #324]	; (8000394 <LCD_isbusy+0x1a0>)
 8000250:	2201      	movs	r2, #1
 8000252:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000254:	494f      	ldr	r1, [pc, #316]	; (8000394 <LCD_isbusy+0x1a0>)
 8000256:	4850      	ldr	r0, [pc, #320]	; (8000398 <LCD_isbusy+0x1a4>)
 8000258:	f000 fa96 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 800025c:	4b4d      	ldr	r3, [pc, #308]	; (8000394 <LCD_isbusy+0x1a0>)
 800025e:	2220      	movs	r2, #32
 8000260:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000262:	4b4c      	ldr	r3, [pc, #304]	; (8000394 <LCD_isbusy+0x1a0>)
 8000264:	2201      	movs	r2, #1
 8000266:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000268:	494a      	ldr	r1, [pc, #296]	; (8000394 <LCD_isbusy+0x1a0>)
 800026a:	484b      	ldr	r0, [pc, #300]	; (8000398 <LCD_isbusy+0x1a4>)
 800026c:	f000 fa8c 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <LCD_isbusy+0x1a0>)
 8000272:	2240      	movs	r2, #64	; 0x40
 8000274:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000276:	4b47      	ldr	r3, [pc, #284]	; (8000394 <LCD_isbusy+0x1a0>)
 8000278:	2201      	movs	r2, #1
 800027a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800027c:	4945      	ldr	r1, [pc, #276]	; (8000394 <LCD_isbusy+0x1a0>)
 800027e:	4846      	ldr	r0, [pc, #280]	; (8000398 <LCD_isbusy+0x1a4>)
 8000280:	f000 fa82 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 8000284:	4b43      	ldr	r3, [pc, #268]	; (8000394 <LCD_isbusy+0x1a0>)
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800028a:	4b42      	ldr	r3, [pc, #264]	; (8000394 <LCD_isbusy+0x1a0>)
 800028c:	2201      	movs	r2, #1
 800028e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000290:	4940      	ldr	r1, [pc, #256]	; (8000394 <LCD_isbusy+0x1a0>)
 8000292:	4841      	ldr	r0, [pc, #260]	; (8000398 <LCD_isbusy+0x1a4>)
 8000294:	f000 fa78 	bl	8000788 <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH ,GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	483e      	ldr	r0, [pc, #248]	; (8000398 <LCD_isbusy+0x1a4>)
 80002a0:	f000 faf1 	bl	8000886 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH ,GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	483b      	ldr	r0, [pc, #236]	; (8000398 <LCD_isbusy+0x1a4>)
 80002ac:	f000 faeb 	bl	8000886 <MCAL_GPIO_WritePin>

	//LCD_CTRL |= (1<<RW_SWITCH);
	//LCD_CTRL &= ~(1<<RS_SWITCH);
	LCD_kick();
 80002b0:	f7ff ff5e 	bl	8000170 <LCD_kick>

	PinCfg.GPIO_PinNumber = GPIO_PIN_0 ;
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <LCD_isbusy+0x1a0>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002ba:	4b36      	ldr	r3, [pc, #216]	; (8000394 <LCD_isbusy+0x1a0>)
 80002bc:	2204      	movs	r2, #4
 80002be:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002c0:	4b34      	ldr	r3, [pc, #208]	; (8000394 <LCD_isbusy+0x1a0>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80002c6:	4933      	ldr	r1, [pc, #204]	; (8000394 <LCD_isbusy+0x1a0>)
 80002c8:	4833      	ldr	r0, [pc, #204]	; (8000398 <LCD_isbusy+0x1a4>)
 80002ca:	f000 fa5d 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1 ;
 80002ce:	4b31      	ldr	r3, [pc, #196]	; (8000394 <LCD_isbusy+0x1a0>)
 80002d0:	2202      	movs	r2, #2
 80002d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002d4:	4b2f      	ldr	r3, [pc, #188]	; (8000394 <LCD_isbusy+0x1a0>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002da:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <LCD_isbusy+0x1a0>)
 80002dc:	2201      	movs	r2, #1
 80002de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80002e0:	492c      	ldr	r1, [pc, #176]	; (8000394 <LCD_isbusy+0x1a0>)
 80002e2:	482d      	ldr	r0, [pc, #180]	; (8000398 <LCD_isbusy+0x1a4>)
 80002e4:	f000 fa50 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 80002e8:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <LCD_isbusy+0x1a0>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <LCD_isbusy+0x1a0>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <LCD_isbusy+0x1a0>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80002fa:	4926      	ldr	r1, [pc, #152]	; (8000394 <LCD_isbusy+0x1a0>)
 80002fc:	4826      	ldr	r0, [pc, #152]	; (8000398 <LCD_isbusy+0x1a4>)
 80002fe:	f000 fa43 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <LCD_isbusy+0x1a0>)
 8000304:	2208      	movs	r2, #8
 8000306:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <LCD_isbusy+0x1a0>)
 800030a:	2204      	movs	r2, #4
 800030c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <LCD_isbusy+0x1a0>)
 8000310:	2201      	movs	r2, #1
 8000312:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000314:	491f      	ldr	r1, [pc, #124]	; (8000394 <LCD_isbusy+0x1a0>)
 8000316:	4820      	ldr	r0, [pc, #128]	; (8000398 <LCD_isbusy+0x1a4>)
 8000318:	f000 fa36 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_4 ;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <LCD_isbusy+0x1a0>)
 800031e:	2210      	movs	r2, #16
 8000320:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <LCD_isbusy+0x1a0>)
 8000324:	2204      	movs	r2, #4
 8000326:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <LCD_isbusy+0x1a0>)
 800032a:	2201      	movs	r2, #1
 800032c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800032e:	4919      	ldr	r1, [pc, #100]	; (8000394 <LCD_isbusy+0x1a0>)
 8000330:	4819      	ldr	r0, [pc, #100]	; (8000398 <LCD_isbusy+0x1a4>)
 8000332:	f000 fa29 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <LCD_isbusy+0x1a0>)
 8000338:	2220      	movs	r2, #32
 800033a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <LCD_isbusy+0x1a0>)
 800033e:	2204      	movs	r2, #4
 8000340:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <LCD_isbusy+0x1a0>)
 8000344:	2201      	movs	r2, #1
 8000346:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000348:	4912      	ldr	r1, [pc, #72]	; (8000394 <LCD_isbusy+0x1a0>)
 800034a:	4813      	ldr	r0, [pc, #76]	; (8000398 <LCD_isbusy+0x1a4>)
 800034c:	f000 fa1c 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <LCD_isbusy+0x1a0>)
 8000352:	2240      	movs	r2, #64	; 0x40
 8000354:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <LCD_isbusy+0x1a0>)
 8000358:	2204      	movs	r2, #4
 800035a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <LCD_isbusy+0x1a0>)
 800035e:	2201      	movs	r2, #1
 8000360:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000362:	490c      	ldr	r1, [pc, #48]	; (8000394 <LCD_isbusy+0x1a0>)
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LCD_isbusy+0x1a4>)
 8000366:	f000 fa0f 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <LCD_isbusy+0x1a0>)
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <LCD_isbusy+0x1a0>)
 8000372:	2204      	movs	r2, #4
 8000374:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <LCD_isbusy+0x1a0>)
 8000378:	2201      	movs	r2, #1
 800037a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800037c:	4905      	ldr	r1, [pc, #20]	; (8000394 <LCD_isbusy+0x1a0>)
 800037e:	4806      	ldr	r0, [pc, #24]	; (8000398 <LCD_isbusy+0x1a4>)
 8000380:	f000 fa02 	bl	8000788 <MCAL_GPIO_Init>

	//DataDir_LCD_PORT |= (0xFF << DATA_shift);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH ,GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038a:	4803      	ldr	r0, [pc, #12]	; (8000398 <LCD_isbusy+0x1a4>)
 800038c:	f000 fa7b 	bl	8000886 <MCAL_GPIO_WritePin>
	//LCD_CTRL &= ~(1<<RW_SWITCH);
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000001c 	.word	0x2000001c
 8000398:	40010800 	.word	0x40010800

0800039c <LCD_clear_screen>:

void LCD_clear_screen()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 f8c3 	bl	800052c <LCD_WRITE_COMMAND>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <LCD_INIT>:

void LCD_INIT(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	my_wait(20);
 80003b0:	2014      	movs	r0, #20
 80003b2:	f000 fd61 	bl	8000e78 <my_wait>

	//ENABLE_SWITCH,RS_SWITCH,RW_SWITCH input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = ENABLE_SWITCH ;
 80003b6:	4b5b      	ldr	r3, [pc, #364]	; (8000524 <LCD_INIT+0x178>)
 80003b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003bc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003be:	4b59      	ldr	r3, [pc, #356]	; (8000524 <LCD_INIT+0x178>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003c4:	4b57      	ldr	r3, [pc, #348]	; (8000524 <LCD_INIT+0x178>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003ca:	4956      	ldr	r1, [pc, #344]	; (8000524 <LCD_INIT+0x178>)
 80003cc:	4856      	ldr	r0, [pc, #344]	; (8000528 <LCD_INIT+0x17c>)
 80003ce:	f000 f9db 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80003d2:	4b54      	ldr	r3, [pc, #336]	; (8000524 <LCD_INIT+0x178>)
 80003d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003da:	4b52      	ldr	r3, [pc, #328]	; (8000524 <LCD_INIT+0x178>)
 80003dc:	2204      	movs	r2, #4
 80003de:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e0:	4b50      	ldr	r3, [pc, #320]	; (8000524 <LCD_INIT+0x178>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003e6:	494f      	ldr	r1, [pc, #316]	; (8000524 <LCD_INIT+0x178>)
 80003e8:	484f      	ldr	r0, [pc, #316]	; (8000528 <LCD_INIT+0x17c>)
 80003ea:	f000 f9cd 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80003ee:	4b4d      	ldr	r3, [pc, #308]	; (8000524 <LCD_INIT+0x178>)
 80003f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f6:	4b4b      	ldr	r3, [pc, #300]	; (8000524 <LCD_INIT+0x178>)
 80003f8:	2204      	movs	r2, #4
 80003fa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003fc:	4b49      	ldr	r3, [pc, #292]	; (8000524 <LCD_INIT+0x178>)
 80003fe:	2201      	movs	r2, #1
 8000400:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000402:	4948      	ldr	r1, [pc, #288]	; (8000524 <LCD_INIT+0x178>)
 8000404:	4848      	ldr	r0, [pc, #288]	; (8000528 <LCD_INIT+0x17c>)
 8000406:	f000 f9bf 	bl	8000788 <MCAL_GPIO_Init>

	my_wait(15);
 800040a:	200f      	movs	r0, #15
 800040c:	f000 fd34 	bl	8000e78 <my_wait>

	//DATA PINS output pp with speed 10MHZ
	PinCfg.GPIO_PinNumber = GPIO_PIN_0 ;
 8000410:	4b44      	ldr	r3, [pc, #272]	; (8000524 <LCD_INIT+0x178>)
 8000412:	2201      	movs	r2, #1
 8000414:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <LCD_INIT+0x178>)
 8000418:	2204      	movs	r2, #4
 800041a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <LCD_INIT+0x178>)
 800041e:	2201      	movs	r2, #1
 8000420:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000422:	4940      	ldr	r1, [pc, #256]	; (8000524 <LCD_INIT+0x178>)
 8000424:	4840      	ldr	r0, [pc, #256]	; (8000528 <LCD_INIT+0x17c>)
 8000426:	f000 f9af 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1 ;
 800042a:	4b3e      	ldr	r3, [pc, #248]	; (8000524 <LCD_INIT+0x178>)
 800042c:	2202      	movs	r2, #2
 800042e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000430:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <LCD_INIT+0x178>)
 8000432:	2204      	movs	r2, #4
 8000434:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000436:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <LCD_INIT+0x178>)
 8000438:	2201      	movs	r2, #1
 800043a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800043c:	4939      	ldr	r1, [pc, #228]	; (8000524 <LCD_INIT+0x178>)
 800043e:	483a      	ldr	r0, [pc, #232]	; (8000528 <LCD_INIT+0x17c>)
 8000440:	f000 f9a2 	bl	8000788 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000444:	4b37      	ldr	r3, [pc, #220]	; (8000524 <LCD_INIT+0x178>)
 8000446:	2204      	movs	r2, #4
 8000448:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <LCD_INIT+0x178>)
 800044c:	2204      	movs	r2, #4
 800044e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000450:	4b34      	ldr	r3, [pc, #208]	; (8000524 <LCD_INIT+0x178>)
 8000452:	2201      	movs	r2, #1
 8000454:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000456:	4933      	ldr	r1, [pc, #204]	; (8000524 <LCD_INIT+0x178>)
 8000458:	4833      	ldr	r0, [pc, #204]	; (8000528 <LCD_INIT+0x17c>)
 800045a:	f000 f995 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 800045e:	4b31      	ldr	r3, [pc, #196]	; (8000524 <LCD_INIT+0x178>)
 8000460:	2208      	movs	r2, #8
 8000462:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <LCD_INIT+0x178>)
 8000466:	2204      	movs	r2, #4
 8000468:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800046a:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <LCD_INIT+0x178>)
 800046c:	2201      	movs	r2, #1
 800046e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000470:	492c      	ldr	r1, [pc, #176]	; (8000524 <LCD_INIT+0x178>)
 8000472:	482d      	ldr	r0, [pc, #180]	; (8000528 <LCD_INIT+0x17c>)
 8000474:	f000 f988 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000478:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <LCD_INIT+0x178>)
 800047a:	2210      	movs	r2, #16
 800047c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800047e:	4b29      	ldr	r3, [pc, #164]	; (8000524 <LCD_INIT+0x178>)
 8000480:	2204      	movs	r2, #4
 8000482:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <LCD_INIT+0x178>)
 8000486:	2201      	movs	r2, #1
 8000488:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800048a:	4926      	ldr	r1, [pc, #152]	; (8000524 <LCD_INIT+0x178>)
 800048c:	4826      	ldr	r0, [pc, #152]	; (8000528 <LCD_INIT+0x17c>)
 800048e:	f000 f97b 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <LCD_INIT+0x178>)
 8000494:	2220      	movs	r2, #32
 8000496:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000498:	4b22      	ldr	r3, [pc, #136]	; (8000524 <LCD_INIT+0x178>)
 800049a:	2204      	movs	r2, #4
 800049c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800049e:	4b21      	ldr	r3, [pc, #132]	; (8000524 <LCD_INIT+0x178>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004a4:	491f      	ldr	r1, [pc, #124]	; (8000524 <LCD_INIT+0x178>)
 80004a6:	4820      	ldr	r0, [pc, #128]	; (8000528 <LCD_INIT+0x17c>)
 80004a8:	f000 f96e 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 80004ac:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <LCD_INIT+0x178>)
 80004ae:	2240      	movs	r2, #64	; 0x40
 80004b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <LCD_INIT+0x178>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <LCD_INIT+0x178>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004be:	4919      	ldr	r1, [pc, #100]	; (8000524 <LCD_INIT+0x178>)
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <LCD_INIT+0x17c>)
 80004c2:	f000 f961 	bl	8000788 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <LCD_INIT+0x178>)
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <LCD_INIT+0x178>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <LCD_INIT+0x178>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004d8:	4912      	ldr	r1, [pc, #72]	; (8000524 <LCD_INIT+0x178>)
 80004da:	4813      	ldr	r0, [pc, #76]	; (8000528 <LCD_INIT+0x17c>)
 80004dc:	f000 f954 	bl	8000788 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e6:	4810      	ldr	r0, [pc, #64]	; (8000528 <LCD_INIT+0x17c>)
 80004e8:	f000 f9cd 	bl	8000886 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <LCD_INIT+0x17c>)
 80004f4:	f000 f9c7 	bl	8000886 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	480a      	ldr	r0, [pc, #40]	; (8000528 <LCD_INIT+0x17c>)
 8000500:	f000 f9c1 	bl	8000886 <MCAL_GPIO_WritePin>


	LCD_clear_screen();
 8000504:	f7ff ff4a 	bl	800039c <LCD_clear_screen>

	//#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000508:	2038      	movs	r0, #56	; 0x38
 800050a:	f000 f80f 	bl	800052c <LCD_WRITE_COMMAND>
	//#ifdef FOUR_BIT_MODE
	//	LCD_WRITE_COMMAND(0x02);
	//	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	//#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800050e:	2006      	movs	r0, #6
 8000510:	f000 f80c 	bl	800052c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	f000 f809 	bl	800052c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800051a:	200f      	movs	r0, #15
 800051c:	f000 f806 	bl	800052c <LCD_WRITE_COMMAND>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000001c 	.word	0x2000001c
 8000528:	40010800 	.word	0x40010800

0800052c <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 8000536:	f7ff fe5d 	bl	80001f4 <LCD_isbusy>

	//#ifdef EIGHT_BIT_MODE
	//	LCD_PORT = command;

	MCAL_GPIO_WritePort(LCD_PORT, command);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LCD_WRITE_COMMAND+0x44>)
 8000542:	f000 f9b7 	bl	80008b4 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <LCD_WRITE_COMMAND+0x44>)
 800054e:	f000 f99a 	bl	8000886 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <LCD_WRITE_COMMAND+0x44>)
 800055a:	f000 f994 	bl	8000886 <MCAL_GPIO_WritePin>

	//	LCD_CTRL &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
	my_wait(1);
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fc8a 	bl	8000e78 <my_wait>

	LCD_kick();
 8000564:	f7ff fe04 	bl	8000170 <LCD_kick>
	//	LCD_kick();
	//	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	//	LCD_CTRL &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
	//	LCD_kick();
	//#endif
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010800 	.word	0x40010800

08000574 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char data)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]

	//#ifdef EIGHT_BIT_MODE
	LCD_isbusy();
 800057e:	f7ff fe39 	bl	80001f4 <LCD_isbusy>
	//	LCD_PORT = data;
	MCAL_GPIO_WritePort(LCD_PORT, data);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	b29b      	uxth	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <LCD_WRITE_CHAR+0x44>)
 800058a:	f000 f993 	bl	80008b4 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <LCD_WRITE_CHAR+0x44>)
 8000596:	f000 f976 	bl	8000886 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <LCD_WRITE_CHAR+0x44>)
 80005a2:	f000 f970 	bl	8000886 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1<<RW_SWITCH);
	//	LCD_CTRL |= (1<<RS_SWITCH);
	my_wait(1);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fc66 	bl	8000e78 <my_wait>
	LCD_kick();
 80005ac:	f7ff fde0 	bl	8000170 <LCD_kick>
	//	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);
	//	LCD_CTRL |= (1<<RS_SWITCH);
	//	LCD_CTRL &= ~(1<<RW_SWITCH);
	//	LCD_kick();
	//#endif
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010800 	.word	0x40010800

080005bc <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char* data)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]

	while(*data > 0)
 80005c8:	e01c      	b.n	8000604 <LCD_WRITE_STRING+0x48>
	{
		LCD_WRITE_CHAR(*data++);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffce 	bl	8000574 <LCD_WRITE_CHAR>
		count++;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
		if(count == 16)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d104      	bne.n	80005ee <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff fdda 	bl	80001a0 <LCD_GOTO_XY>
 80005ec:	e00a      	b.n	8000604 <LCD_WRITE_STRING+0x48>
		}
		else if(count == 32)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b20      	cmp	r3, #32
 80005f2:	d107      	bne.n	8000604 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80005f4:	f7ff fed2 	bl	800039c <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff fdd0 	bl	80001a0 <LCD_GOTO_XY>
			count = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1de      	bne.n	80005ca <LCD_WRITE_STRING+0xe>
		}
	}
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <Get_CRLH_Position>:
 * 						Generic Functions
 * ================================================================
 */

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000628:	f000 80a5 	beq.w	8000776 <Get_CRLH_Position+0x15e>
 800062c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000630:	f300 80a3 	bgt.w	800077a <Get_CRLH_Position+0x162>
 8000634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000638:	f000 809b 	beq.w	8000772 <Get_CRLH_Position+0x15a>
 800063c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000640:	f300 809b 	bgt.w	800077a <Get_CRLH_Position+0x162>
 8000644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000648:	f000 8091 	beq.w	800076e <Get_CRLH_Position+0x156>
 800064c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000650:	f300 8093 	bgt.w	800077a <Get_CRLH_Position+0x162>
 8000654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000658:	f000 8087 	beq.w	800076a <Get_CRLH_Position+0x152>
 800065c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000660:	f300 808b 	bgt.w	800077a <Get_CRLH_Position+0x162>
 8000664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000668:	d07d      	beq.n	8000766 <Get_CRLH_Position+0x14e>
 800066a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800066e:	f300 8084 	bgt.w	800077a <Get_CRLH_Position+0x162>
 8000672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000676:	d074      	beq.n	8000762 <Get_CRLH_Position+0x14a>
 8000678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800067c:	dc7d      	bgt.n	800077a <Get_CRLH_Position+0x162>
 800067e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000682:	d06c      	beq.n	800075e <Get_CRLH_Position+0x146>
 8000684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000688:	dc77      	bgt.n	800077a <Get_CRLH_Position+0x162>
 800068a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800068e:	d064      	beq.n	800075a <Get_CRLH_Position+0x142>
 8000690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000694:	dc71      	bgt.n	800077a <Get_CRLH_Position+0x162>
 8000696:	2b80      	cmp	r3, #128	; 0x80
 8000698:	d05d      	beq.n	8000756 <Get_CRLH_Position+0x13e>
 800069a:	2b80      	cmp	r3, #128	; 0x80
 800069c:	dc6d      	bgt.n	800077a <Get_CRLH_Position+0x162>
 800069e:	2b20      	cmp	r3, #32
 80006a0:	dc48      	bgt.n	8000734 <Get_CRLH_Position+0x11c>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dd69      	ble.n	800077a <Get_CRLH_Position+0x162>
 80006a6:	3b01      	subs	r3, #1
 80006a8:	2b1f      	cmp	r3, #31
 80006aa:	d866      	bhi.n	800077a <Get_CRLH_Position+0x162>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <Get_CRLH_Position+0x9c>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	0800073b 	.word	0x0800073b
 80006b8:	0800073f 	.word	0x0800073f
 80006bc:	0800077b 	.word	0x0800077b
 80006c0:	08000743 	.word	0x08000743
 80006c4:	0800077b 	.word	0x0800077b
 80006c8:	0800077b 	.word	0x0800077b
 80006cc:	0800077b 	.word	0x0800077b
 80006d0:	08000747 	.word	0x08000747
 80006d4:	0800077b 	.word	0x0800077b
 80006d8:	0800077b 	.word	0x0800077b
 80006dc:	0800077b 	.word	0x0800077b
 80006e0:	0800077b 	.word	0x0800077b
 80006e4:	0800077b 	.word	0x0800077b
 80006e8:	0800077b 	.word	0x0800077b
 80006ec:	0800077b 	.word	0x0800077b
 80006f0:	0800074b 	.word	0x0800074b
 80006f4:	0800077b 	.word	0x0800077b
 80006f8:	0800077b 	.word	0x0800077b
 80006fc:	0800077b 	.word	0x0800077b
 8000700:	0800077b 	.word	0x0800077b
 8000704:	0800077b 	.word	0x0800077b
 8000708:	0800077b 	.word	0x0800077b
 800070c:	0800077b 	.word	0x0800077b
 8000710:	0800077b 	.word	0x0800077b
 8000714:	0800077b 	.word	0x0800077b
 8000718:	0800077b 	.word	0x0800077b
 800071c:	0800077b 	.word	0x0800077b
 8000720:	0800077b 	.word	0x0800077b
 8000724:	0800077b 	.word	0x0800077b
 8000728:	0800077b 	.word	0x0800077b
 800072c:	0800077b 	.word	0x0800077b
 8000730:	0800074f 	.word	0x0800074f
 8000734:	2b40      	cmp	r3, #64	; 0x40
 8000736:	d00c      	beq.n	8000752 <Get_CRLH_Position+0x13a>
 8000738:	e01f      	b.n	800077a <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800073a:	2300      	movs	r3, #0
 800073c:	e01e      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800073e:	2304      	movs	r3, #4
 8000740:	e01c      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000742:	2308      	movs	r3, #8
 8000744:	e01a      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000746:	230c      	movs	r3, #12
 8000748:	e018      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800074a:	2310      	movs	r3, #16
 800074c:	e016      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 800074e:	2314      	movs	r3, #20
 8000750:	e014      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000752:	2318      	movs	r3, #24
 8000754:	e012      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000756:	231c      	movs	r3, #28
 8000758:	e010      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800075a:	2300      	movs	r3, #0
 800075c:	e00e      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 800075e:	2304      	movs	r3, #4
 8000760:	e00c      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000762:	2308      	movs	r3, #8
 8000764:	e00a      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000766:	230c      	movs	r3, #12
 8000768:	e008      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800076a:	2310      	movs	r3, #16
 800076c:	e006      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 800076e:	2314      	movs	r3, #20
 8000770:	e004      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000772:	2318      	movs	r3, #24
 8000774:	e002      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000776:	231c      	movs	r3, #28
 8000778:	e000      	b.n	800077c <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)(x=A..E) configures pins from 0 >> 7
	//Port configuration register high (GPIOx_CRH)(x=A..E) configures pins from 8 >> 15

	volatile uint32_t* ConfigReg = NULL;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]

	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )? &GPIOx->CRL : &GPIOx->CRH ;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	2bff      	cmp	r3, #255	; 0xff
 80007a0:	d801      	bhi.n	80007a6 <MCAL_GPIO_Init+0x1e>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	e001      	b.n	80007aa <MCAL_GPIO_Init+0x22>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3304      	adds	r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[1:0]
	(*ConfigReg) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff31 	bl	8000618 <Get_CRLH_Position>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	230f      	movs	r3, #15
 80007bc:	4093      	lsls	r3, r2
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	401a      	ands	r2, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(	(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	d00b      	beq.n	80007ea <MCAL_GPIO_Init+0x62>
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d007      	beq.n	80007ea <MCAL_GPIO_Init+0x62>
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	789b      	ldrb	r3, [r3, #2]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d003      	beq.n	80007ea <MCAL_GPIO_Init+0x62>
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d10e      	bne.n	8000808 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	3b04      	subs	r3, #4
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	78db      	ldrb	r3, [r3, #3]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	e02c      	b.n	8000862 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else	//Mode = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	789b      	ldrb	r3, [r3, #2]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d003      	beq.n	8000818 <MCAL_GPIO_Init+0x90>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d107      	bne.n	8000828 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0]
			PIN_Config = ( ((PinConfig->GPIO_MODE) << 2) & 0x0F );
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e01c      	b.n	8000862 <MCAL_GPIO_Init+0xda>

		}
		else if((PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT))	//Consider it as input floating
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b08      	cmp	r3, #8
 800082e:	d102      	bne.n	8000836 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (GPIO_MODE_INPUT_FLO << 2) & 0x0F );
 8000830:	2304      	movs	r3, #4
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e015      	b.n	8000862 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0F );
 8000836:	2308      	movs	r3, #8
 8000838:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d107      	bne.n	8000852 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	e007      	b.n	8000862 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0 Input pull-down	 :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	43d2      	mvns	r2, r2
 800085c:	401a      	ands	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on the CRL or CRH
	(*ConfigReg) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000862:	7bfc      	ldrb	r4, [r7, #15]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fed5 	bl	8000618 <Get_CRLH_Position>
 800086e:	4603      	mov	r3, r0
 8000870:	fa04 f203 	lsl.w	r2, r4, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	431a      	orrs	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	601a      	str	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bd90      	pop	{r4, r7, pc}

08000886 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Set specified pin according to @ref GPIO_PIN_state
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx,uint16_t PinNumber,uint8_t Value)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	460b      	mov	r3, r1
 8000890:	807b      	strh	r3, [r7, #2]
 8000892:	4613      	mov	r3, r2
 8000894:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET )
 8000896:	787b      	ldrb	r3, [r7, #1]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <MCAL_GPIO_WritePin+0x1e>

		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 800089c:	887a      	ldrh	r2, [r7, #2]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	611a      	str	r2, [r3, #16]
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR  = (uint32_t)PinNumber;
	}
}
 80008a2:	e002      	b.n	80008aa <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR  = (uint32_t)PinNumber;
 80008a4:	887a      	ldrh	r2, [r7, #2]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	615a      	str	r2, [r3, #20]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <MCAL_GPIO_WritePort>:
 * @param [in] 	-Value: Set specified port value
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx,uint16_t Value)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 80008c0:	887a      	ldrh	r2, [r7, #2]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	60da      	str	r2, [r3, #12]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Enable_NVIC>:
 * 						Generic Functions
 * ================================================================
 */

void Enable_NVIC(uint16_t IRQ)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d854      	bhi.n	800098a <Enable_NVIC+0xba>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <Enable_NVIC+0x18>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000929 	.word	0x08000929
 80008ec:	08000937 	.word	0x08000937
 80008f0:	08000945 	.word	0x08000945
 80008f4:	08000953 	.word	0x08000953
 80008f8:	08000961 	.word	0x08000961
 80008fc:	0800096f 	.word	0x0800096f
 8000900:	0800096f 	.word	0x0800096f
 8000904:	0800096f 	.word	0x0800096f
 8000908:	0800096f 	.word	0x0800096f
 800090c:	0800096f 	.word	0x0800096f
 8000910:	0800097d 	.word	0x0800097d
 8000914:	0800097d 	.word	0x0800097d
 8000918:	0800097d 	.word	0x0800097d
 800091c:	0800097d 	.word	0x0800097d
 8000920:	0800097d 	.word	0x0800097d
 8000924:	0800097d 	.word	0x0800097d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable();
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <Enable_NVIC+0xc4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <Enable_NVIC+0xc4>)
 800092e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000932:	6013      	str	r3, [r2, #0]
		break;
 8000934:	e029      	b.n	800098a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable();
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <Enable_NVIC+0xc4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <Enable_NVIC+0xc4>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6013      	str	r3, [r2, #0]
		break;
 8000942:	e022      	b.n	800098a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable();
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <Enable_NVIC+0xc4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <Enable_NVIC+0xc4>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	6013      	str	r3, [r2, #0]
		break;
 8000950:	e01b      	b.n	800098a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable();
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <Enable_NVIC+0xc4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <Enable_NVIC+0xc4>)
 8000958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095c:	6013      	str	r3, [r2, #0]
		break;
 800095e:	e014      	b.n	800098a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable();
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <Enable_NVIC+0xc4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <Enable_NVIC+0xc4>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]
		break;
 800096c:	e00d      	b.n	800098a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <Enable_NVIC+0xc4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <Enable_NVIC+0xc4>)
 8000974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000978:	6013      	str	r3, [r2, #0]
		break;
 800097a:	e006      	b.n	800098a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable();
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <Enable_NVIC+0xc8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <Enable_NVIC+0xc8>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000986:	6013      	str	r3, [r2, #0]
		break;
 8000988:	bf00      	nop
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000e104 	.word	0xe000e104

0800099c <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d854      	bhi.n	8000a56 <Disable_NVIC+0xba>
 80009ac:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <Disable_NVIC+0x18>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009f5 	.word	0x080009f5
 80009b8:	08000a03 	.word	0x08000a03
 80009bc:	08000a11 	.word	0x08000a11
 80009c0:	08000a1f 	.word	0x08000a1f
 80009c4:	08000a2d 	.word	0x08000a2d
 80009c8:	08000a3b 	.word	0x08000a3b
 80009cc:	08000a3b 	.word	0x08000a3b
 80009d0:	08000a3b 	.word	0x08000a3b
 80009d4:	08000a3b 	.word	0x08000a3b
 80009d8:	08000a3b 	.word	0x08000a3b
 80009dc:	08000a49 	.word	0x08000a49
 80009e0:	08000a49 	.word	0x08000a49
 80009e4:	08000a49 	.word	0x08000a49
 80009e8:	08000a49 	.word	0x08000a49
 80009ec:	08000a49 	.word	0x08000a49
 80009f0:	08000a49 	.word	0x08000a49
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable();
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <Disable_NVIC+0xc4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <Disable_NVIC+0xc4>)
 80009fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fe:	6013      	str	r3, [r2, #0]
		break;
 8000a00:	e029      	b.n	8000a56 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable();
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0c:	6013      	str	r3, [r2, #0]
		break;
 8000a0e:	e022      	b.n	8000a56 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable();
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
		break;
 8000a1c:	e01b      	b.n	8000a56 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable();
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a28:	6013      	str	r3, [r2, #0]
		break;
 8000a2a:	e014      	b.n	8000a56 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable();
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
		break;
 8000a38:	e00d      	b.n	8000a56 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <Disable_NVIC+0xc4>)
 8000a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a44:	6013      	str	r3, [r2, #0]
		break;
 8000a46:	e006      	b.n	8000a56 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable();
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <Disable_NVIC+0xc8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <Disable_NVIC+0xc8>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
		break;
 8000a54:	bf00      	nop
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	e000e180 	.word	0xe000e180
 8000a64:	e000e184 	.word	0xe000e184

08000a68 <Update_EXTI>:


void Update_EXTI(EXTI_PinConfig_t * EXTI_Config)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AFIO Input -> Floating Input

	GPIO_PinConfig_t PinCfg;
	//Update The GPIO To Be Floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN ;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a76:	2301      	movs	r3, #1
 8000a78:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PinCfg);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f107 0208 	add.w	r2, r7, #8
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe7f 	bl	8000788 <MCAL_GPIO_Init>

	//=====================================================
	//2- Update AFIO to route between EXTI Line With Port A,B,C,D

	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.ETI_InputLineNumber / 4 ;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.ETI_InputLineNumber % 4) * 4 ;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	73bb      	strb	r3, [r7, #14]

	//Clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position) ;
 8000aa4:	4a5f      	ldr	r2, [pc, #380]	; (8000c24 <Update_EXTI+0x1bc>)
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	495a      	ldr	r1, [pc, #360]	; (8000c24 <Update_EXTI+0x1bc>)
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4002      	ands	r2, r0
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Set the four bit to select the GPIO Port
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF) << AFIO_EXTICR_Position) ;
 8000ac6:	4a57      	ldr	r2, [pc, #348]	; (8000c24 <Update_EXTI+0x1bc>)
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4954      	ldr	r1, [pc, #336]	; (8000c28 <Update_EXTI+0x1c0>)
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d016      	beq.n	8000b08 <Update_EXTI+0xa0>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4953      	ldr	r1, [pc, #332]	; (8000c2c <Update_EXTI+0x1c4>)
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d00f      	beq.n	8000b04 <Update_EXTI+0x9c>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	4951      	ldr	r1, [pc, #324]	; (8000c30 <Update_EXTI+0x1c8>)
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d008      	beq.n	8000b00 <Update_EXTI+0x98>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4950      	ldr	r1, [pc, #320]	; (8000c34 <Update_EXTI+0x1cc>)
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d101      	bne.n	8000afc <Update_EXTI+0x94>
 8000af8:	2303      	movs	r3, #3
 8000afa:	e006      	b.n	8000b0a <Update_EXTI+0xa2>
 8000afc:	2300      	movs	r3, #0
 8000afe:	e004      	b.n	8000b0a <Update_EXTI+0xa2>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e002      	b.n	8000b0a <Update_EXTI+0xa2>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <Update_EXTI+0xa2>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	7bb9      	ldrb	r1, [r7, #14]
 8000b0c:	408b      	lsls	r3, r1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	4944      	ldr	r1, [pc, #272]	; (8000c24 <Update_EXTI+0x1bc>)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	4302      	orrs	r2, r0
 8000b16:	3302      	adds	r3, #2
 8000b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//=====================================================
	//3- Update rising or falling registers in EXTI

	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000b1c:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	8812      	ldrh	r2, [r2, #0]
 8000b24:	4611      	mov	r1, r2
 8000b26:	2201      	movs	r2, #1
 8000b28:	408a      	lsls	r2, r1
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b30:	400b      	ands	r3, r1
 8000b32:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	8812      	ldrh	r2, [r2, #0]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	2201      	movs	r2, #1
 8000b40:	408a      	lsls	r2, r1
 8000b42:	43d2      	mvns	r2, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a3c      	ldr	r2, [pc, #240]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b48:	400b      	ands	r3, r1
 8000b4a:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7b1b      	ldrb	r3, [r3, #12]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	8812      	ldrh	r2, [r2, #0]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	2201      	movs	r2, #1
 8000b60:	408a      	lsls	r2, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	4a34      	ldr	r2, [pc, #208]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b66:	430b      	orrs	r3, r1
 8000b68:	6093      	str	r3, [r2, #8]
 8000b6a:	e029      	b.n	8000bc0 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7b1b      	ldrb	r3, [r3, #12]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10b      	bne.n	8000b8c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	8812      	ldrh	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	2201      	movs	r2, #1
 8000b80:	408a      	lsls	r2, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a2c      	ldr	r2, [pc, #176]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	60d3      	str	r3, [r2, #12]
 8000b8a:	e019      	b.n	8000bc0 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7b1b      	ldrb	r3, [r3, #12]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d115      	bne.n	8000bc0 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <Update_EXTI+0x1d0>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	8812      	ldrh	r2, [r2, #0]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	408a      	lsls	r2, r1
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <Update_EXTI+0x1d0>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <Update_EXTI+0x1d0>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	8812      	ldrh	r2, [r2, #0]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	408a      	lsls	r2, r1
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <Update_EXTI+0x1d0>)
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	60d3      	str	r3, [r2, #12]
	}

	//=====================================================
	//4- Update IRQ Handling CALLBACK

	GP_IRQ_Callback[EXTI_Config->EXTI_PIN.ETI_InputLineNumber] = EXTI_Config->P_IRQ_Callback ;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <Update_EXTI+0x1d4>)
 8000bcc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//=====================================================
	//5- Enable/Disable IRQ EXTI & NVIC

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7b5b      	ldrb	r3, [r3, #13]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d110      	bne.n	8000bfa <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <Update_EXTI+0x1d0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	8812      	ldrh	r2, [r2, #0]
 8000be0:	4611      	mov	r1, r2
 8000be2:	2201      	movs	r2, #1
 8000be4:	408a      	lsls	r2, r1
 8000be6:	4611      	mov	r1, r2
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <Update_EXTI+0x1d0>)
 8000bea:	430b      	orrs	r3, r1
 8000bec:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe6c 	bl	80008d0 <Enable_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
		Disable_NVIC(EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
	}

}
 8000bf8:	e010      	b.n	8000c1c <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <Update_EXTI+0x1d0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	8812      	ldrh	r2, [r2, #0]
 8000c02:	4611      	mov	r1, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	408a      	lsls	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <Update_EXTI+0x1d0>)
 8000c0e:	400b      	ands	r3, r1
 8000c10:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fec0 	bl	800099c <Disable_NVIC>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40010000 	.word	0x40010000
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40011400 	.word	0x40011400
 8000c38:	40010400 	.word	0x40010400
 8000c3c:	20000020 	.word	0x20000020

08000c40 <MCAL_EXTI_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 *				-Also Mandatory to Enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff0d 	bl	8000a68 <Update_EXTI>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <EXTI0_IRQHandler>:
 **=====================    ISR  Functions    =====================
 **================================================================
 **/

void EXTI0_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 0);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <EXTI0_IRQHandler+0x1c>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <EXTI0_IRQHandler+0x1c>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALLBACK
	GP_IRQ_Callback[0]();
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <EXTI0_IRQHandler+0x20>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4798      	blx	r3
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40010400 	.word	0x40010400
 8000c78:	20000020 	.word	0x20000020

08000c7c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 1);
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <EXTI1_IRQHandler+0x1c>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <EXTI1_IRQHandler+0x1c>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALLBACK
	GP_IRQ_Callback[1]();
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <EXTI1_IRQHandler+0x20>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4798      	blx	r3
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010400 	.word	0x40010400
 8000c9c:	20000020 	.word	0x20000020

08000ca0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 2);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <EXTI2_IRQHandler+0x1c>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <EXTI2_IRQHandler+0x1c>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALLBACK
	GP_IRQ_Callback[2]();
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <EXTI2_IRQHandler+0x20>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4798      	blx	r3
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010400 	.word	0x40010400
 8000cc0:	20000020 	.word	0x20000020

08000cc4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 3);
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <EXTI3_IRQHandler+0x1c>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <EXTI3_IRQHandler+0x1c>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALLBACK
	GP_IRQ_Callback[3]();
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <EXTI3_IRQHandler+0x20>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4798      	blx	r3
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010400 	.word	0x40010400
 8000ce4:	20000020 	.word	0x20000020

08000ce8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 4);
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <EXTI4_IRQHandler+0x1c>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <EXTI4_IRQHandler+0x1c>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALLBACK
	GP_IRQ_Callback[4]();
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <EXTI4_IRQHandler+0x20>)
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	4798      	blx	r3
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010400 	.word	0x40010400
 8000d08:	20000020 	.word	0x20000020

08000d0c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 ) { EXTI->PR |= (1 << 5)	; GP_IRQ_Callback[5]() ;}
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <EXTI9_5_IRQHandler+0x22>
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	6153      	str	r3, [r2, #20]
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <EXTI9_5_IRQHandler+0xa4>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	4798      	blx	r3
	if(EXTI->PR & 1<<6 ) { EXTI->PR |= (1 << 6)	; GP_IRQ_Callback[6]() ;}
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <EXTI9_5_IRQHandler+0x40>
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <EXTI9_5_IRQHandler+0xa4>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4798      	blx	r3
	if(EXTI->PR & 1<<7 ) { EXTI->PR |= (1 << 7)	; GP_IRQ_Callback[7]() ;}
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <EXTI9_5_IRQHandler+0x5e>
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d62:	6153      	str	r3, [r2, #20]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <EXTI9_5_IRQHandler+0xa4>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4798      	blx	r3
	if(EXTI->PR & 1<<8 ) { EXTI->PR |= (1 << 8)	; GP_IRQ_Callback[8]() ;}
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <EXTI9_5_IRQHandler+0x7c>
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <EXTI9_5_IRQHandler+0xa4>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4798      	blx	r3
	if(EXTI->PR & 1<<9 ) { EXTI->PR |= (1 << 9)	; GP_IRQ_Callback[9]() ;}
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <EXTI9_5_IRQHandler+0x9a>
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <EXTI9_5_IRQHandler+0xa0>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6153      	str	r3, [r2, #20]
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <EXTI9_5_IRQHandler+0xa4>)
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	4798      	blx	r3
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010400 	.word	0x40010400
 8000db0:	20000020 	.word	0x20000020

08000db4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 ) { EXTI->PR |= (1 << 10) ; GP_IRQ_Callback[10]() ;}
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d008      	beq.n	8000dd6 <EXTI15_10_IRQHandler+0x22>
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dce:	6153      	str	r3, [r2, #20]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <EXTI15_10_IRQHandler+0xc0>)
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	4798      	blx	r3
	if(EXTI->PR & 1<<11 ) { EXTI->PR |= (1 << 11) ; GP_IRQ_Callback[11]() ;}
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d008      	beq.n	8000df4 <EXTI15_10_IRQHandler+0x40>
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <EXTI15_10_IRQHandler+0xc0>)
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	4798      	blx	r3
	if(EXTI->PR & 1<<12 ) { EXTI->PR |= (1 << 12) ; GP_IRQ_Callback[12]() ;}
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d008      	beq.n	8000e12 <EXTI15_10_IRQHandler+0x5e>
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0a:	6153      	str	r3, [r2, #20]
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <EXTI15_10_IRQHandler+0xc0>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4798      	blx	r3
	if(EXTI->PR & 1<<13 ) { EXTI->PR |= (1 << 13) ; GP_IRQ_Callback[13]() ;}
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d008      	beq.n	8000e30 <EXTI15_10_IRQHandler+0x7c>
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <EXTI15_10_IRQHandler+0xc0>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	4798      	blx	r3
	if(EXTI->PR & 1<<14 ) { EXTI->PR |= (1 << 14) ; GP_IRQ_Callback[14]() ;}
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <EXTI15_10_IRQHandler+0x9a>
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6153      	str	r3, [r2, #20]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <EXTI15_10_IRQHandler+0xc0>)
 8000e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4c:	4798      	blx	r3
	if(EXTI->PR & 1<<15 ) { EXTI->PR |= (1 << 15) ; GP_IRQ_Callback[15]() ;}
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <EXTI15_10_IRQHandler+0xb8>
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <EXTI15_10_IRQHandler+0xbc>)
 8000e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <EXTI15_10_IRQHandler+0xc0>)
 8000e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6a:	4798      	blx	r3
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010400 	.word	0x40010400
 8000e74:	20000020 	.word	0x20000020

08000e78 <my_wait>:


unsigned int IRQ_Flag = 0;

void my_wait(int x)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	unsigned int i , j;
	for(i = 0; i < x ; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e00b      	b.n	8000e9e <my_wait+0x26>
		for(j = 0; j < 255 ;j++);
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	e002      	b.n	8000e92 <my_wait+0x1a>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2bfe      	cmp	r3, #254	; 0xfe
 8000e96:	d9f9      	bls.n	8000e8c <my_wait+0x14>
	for(i = 0; i < x ; i++)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3ef      	bcc.n	8000e86 <my_wait+0xe>
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
	...

08000eb4 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	IRQ_Flag = 1 ;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <EXTI9_Callback+0x1c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 has happened _|-");
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <EXTI9_Callback+0x20>)
 8000ec0:	f7ff fb7c 	bl	80005bc <LCD_WRITE_STRING>
	my_wait(1000);
 8000ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec8:	f7ff ffd6 	bl	8000e78 <my_wait>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000060 	.word	0x20000060
 8000ed4:	0800100c 	.word	0x0800100c

08000ed8 <main>:

int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
	//Enable clock
	RCC_GPIOA_CLK_EN();
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <main+0x70>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <main+0x70>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <main+0x70>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <main+0x70>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <main+0x70>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <main+0x70>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000f02:	f7ff fa53 	bl	80003ac <LCD_INIT>
	LCD_clear_screen();
 8000f06:	f7ff fa49 	bl	800039c <LCD_clear_screen>


	EXTI_PinConfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <main+0x74>)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING ;
 8000f16:	2300      	movs	r3, #0
 8000f18:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_Callback = EXTI9_Callback ;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <main+0x78>)
 8000f1c:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable ;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fe8a 	bl	8000c40 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <main+0x7c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

	/* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <main+0x7c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0fb      	beq.n	8000f32 <main+0x5a>
		{
			LCD_clear_screen();
 8000f3a:	f7ff fa2f 	bl	800039c <LCD_clear_screen>
			IRQ_Flag = 0 ;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <main+0x7c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000f44:	e7f5      	b.n	8000f32 <main+0x5a>
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	08001028 	.word	0x08001028
 8000f50:	08000eb5 	.word	0x08000eb5
 8000f54:	20000060 	.word	0x20000060

08000f58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <LoopForever+0xe>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	; (8000fa4 <LoopForever+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f86:	f000 f811 	bl	8000fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8a:	f7ff ffa5 	bl	8000ed8 <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   r0, =_estack
 8000f90:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f9c:	0800103c 	.word	0x0800103c
  ldr r2, =_sbss
 8000fa0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fa4:	20000064 	.word	0x20000064

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <__libc_init_array>:
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4d0c      	ldr	r5, [pc, #48]	; (8000fe4 <__libc_init_array+0x38>)
 8000fb2:	4c0d      	ldr	r4, [pc, #52]	; (8000fe8 <__libc_init_array+0x3c>)
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	42a6      	cmp	r6, r4
 8000fba:	d109      	bne.n	8000fd0 <__libc_init_array+0x24>
 8000fbc:	f000 f81a 	bl	8000ff4 <_init>
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	4d0a      	ldr	r5, [pc, #40]	; (8000fec <__libc_init_array+0x40>)
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <__libc_init_array+0x44>)
 8000fc6:	1b64      	subs	r4, r4, r5
 8000fc8:	10a4      	asrs	r4, r4, #2
 8000fca:	42a6      	cmp	r6, r4
 8000fcc:	d105      	bne.n	8000fda <__libc_init_array+0x2e>
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fd4:	4798      	blx	r3
 8000fd6:	3601      	adds	r6, #1
 8000fd8:	e7ee      	b.n	8000fb8 <__libc_init_array+0xc>
 8000fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fde:	4798      	blx	r3
 8000fe0:	3601      	adds	r6, #1
 8000fe2:	e7f2      	b.n	8000fca <__libc_init_array+0x1e>
 8000fe4:	08001034 	.word	0x08001034
 8000fe8:	08001034 	.word	0x08001034
 8000fec:	08001034 	.word	0x08001034
 8000ff0:	08001038 	.word	0x08001038

08000ff4 <_init>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

08001000 <_fini>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	bf00      	nop
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr
